// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/timerservice/service.proto

package timerservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimerServiceClient is the client API for TimerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimerServiceClient interface {
	Add(ctx context.Context, in *AddEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddMany(ctx context.Context, in *AddManyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Start(ctx context.Context, in *StartEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stop(ctx context.Context, in *StopEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *RemoveEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TimerTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TimerService_TimerTickClient, error)
}

type timerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerServiceClient(cc grpc.ClientConnInterface) TimerServiceClient {
	return &timerServiceClient{cc}
}

func (c *timerServiceClient) Add(ctx context.Context, in *AddEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timerservice.TimerService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) AddMany(ctx context.Context, in *AddManyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timerservice.TimerService/AddMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Start(ctx context.Context, in *StartEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timerservice.TimerService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Stop(ctx context.Context, in *StopEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timerservice.TimerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Remove(ctx context.Context, in *RemoveEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timerservice.TimerService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) TimerTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TimerService_TimerTickClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimerService_ServiceDesc.Streams[0], "/timerservice.TimerService/TimerTick", opts...)
	if err != nil {
		return nil, err
	}
	x := &timerServiceTimerTickClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimerService_TimerTickClient interface {
	Recv() (*TimerFinishEvent, error)
	grpc.ClientStream
}

type timerServiceTimerTickClient struct {
	grpc.ClientStream
}

func (x *timerServiceTimerTickClient) Recv() (*TimerFinishEvent, error) {
	m := new(TimerFinishEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimerServiceServer is the server API for TimerService service.
// All implementations must embed UnimplementedTimerServiceServer
// for forward compatibility
type TimerServiceServer interface {
	Add(context.Context, *AddEvent) (*emptypb.Empty, error)
	AddMany(context.Context, *AddManyEvent) (*emptypb.Empty, error)
	Start(context.Context, *StartEvent) (*emptypb.Empty, error)
	Stop(context.Context, *StopEvent) (*emptypb.Empty, error)
	Remove(context.Context, *RemoveEvent) (*emptypb.Empty, error)
	TimerTick(*emptypb.Empty, TimerService_TimerTickServer) error
	mustEmbedUnimplementedTimerServiceServer()
}

// UnimplementedTimerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimerServiceServer struct {
}

func (UnimplementedTimerServiceServer) Add(context.Context, *AddEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTimerServiceServer) AddMany(context.Context, *AddManyEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMany not implemented")
}
func (UnimplementedTimerServiceServer) Start(context.Context, *StartEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTimerServiceServer) Stop(context.Context, *StopEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTimerServiceServer) Remove(context.Context, *RemoveEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedTimerServiceServer) TimerTick(*emptypb.Empty, TimerService_TimerTickServer) error {
	return status.Errorf(codes.Unimplemented, "method TimerTick not implemented")
}
func (UnimplementedTimerServiceServer) mustEmbedUnimplementedTimerServiceServer() {}

// UnsafeTimerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimerServiceServer will
// result in compilation errors.
type UnsafeTimerServiceServer interface {
	mustEmbedUnimplementedTimerServiceServer()
}

func RegisterTimerServiceServer(s grpc.ServiceRegistrar, srv TimerServiceServer) {
	s.RegisterService(&TimerService_ServiceDesc, srv)
}

func _TimerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timerservice.TimerService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Add(ctx, req.(*AddEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_AddMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddManyEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).AddMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timerservice.TimerService/AddMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).AddMany(ctx, req.(*AddManyEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timerservice.TimerService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Start(ctx, req.(*StartEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timerservice.TimerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Stop(ctx, req.(*StopEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timerservice.TimerService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Remove(ctx, req.(*RemoveEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_TimerTick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimerServiceServer).TimerTick(m, &timerServiceTimerTickServer{stream})
}

type TimerService_TimerTickServer interface {
	Send(*TimerFinishEvent) error
	grpc.ServerStream
}

type timerServiceTimerTickServer struct {
	grpc.ServerStream
}

func (x *timerServiceTimerTickServer) Send(m *TimerFinishEvent) error {
	return x.ServerStream.SendMsg(m)
}

// TimerService_ServiceDesc is the grpc.ServiceDesc for TimerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timerservice.TimerService",
	HandlerType: (*TimerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TimerService_Add_Handler,
		},
		{
			MethodName: "AddMany",
			Handler:    _TimerService_AddMany_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TimerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TimerService_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _TimerService_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TimerTick",
			Handler:       _TimerService_TimerTick_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/timerservice/service.proto",
}
